VERSION 0.7
FROM public.ecr.aws/lambda/provided:al2023-arm64

ARG --global BUILD_DIR="/tmp/build"
ARG --global INSTALL_DIR="/opt"

ARG --global PKG_CONFIG_PATH="${INSTALL_DIR}/lib64/pkgconfig:${INSTALL_DIR}/lib/pkgconfig"
ARG --global PKG_CONFIG="/usr/bin/pkg-config"
ARG --global PATH="${INSTALL_DIR}/bin:${PATH}"
ARG --global LD_LIBRARY_PATH="${INSTALL_DIR}/lib64:${INSTALL_DIR}/lib"

ARG --global CMAKE_BUILD_PARALLEL_LEVEL=4
ARG --global MAKEFLAGS='-j4'

create-image:
    COPY +setup/* /opt

setup:
    # RUN mkdir -p ${BUILD_DIR}  \
    #     ${INSTALL_DIR}/bin \
    #     ${INSTALL_DIR}/doc \
    #     ${INSTALL_DIR}/etc/php \
    #     ${INSTALL_DIR}/etc/php/conf.d \
    #     ${INSTALL_DIR}/include \
    #     ${INSTALL_DIR}/lib \
    #     ${INSTALL_DIR}/lib64 \
    #     ${INSTALL_DIR}/libexec \
    #     ${INSTALL_DIR}/sbin \
    #     ${INSTALL_DIR}/share

    FROM +php-extensions

    # Export PHP
    RUN chmod +x ${INSTALL_DIR}/bin/php
    SAVE ARTIFACT ${INSTALL_DIR}/bin/php /bin/php

    # Export PHP extensions
    SAVE ARTIFACT $(php -r 'echo ini_get("extension_dir");')/* /bref/extensions

dependencies:
    RUN set -xe \
        && dnf makecache

    RUN LD_LIBRARY_PATH= dnf install -y cmake3
    RUN LD_LIBRARY_PATH= dnf install -y gcc
    RUN LD_LIBRARY_PATH= dnf install -y glibc-langpack-en
    RUN LD_LIBRARY_PATH= dnf install -y perl
    RUN LD_LIBRARY_PATH= dnf install -y perl-IPC-Cmd
    RUN LD_LIBRARY_PATH= dnf install -y tar
    RUN LD_LIBRARY_PATH= dnf install -y gzip
    RUN LD_LIBRARY_PATH= dnf install -y xz
    RUN LD_LIBRARY_PATH= dnf install -y zlib
    RUN LD_LIBRARY_PATH= dnf install -y autoconf
    RUN LD_LIBRARY_PATH= dnf install -y automake
    RUN LD_LIBRARY_PATH= dnf install -y libtool
    RUN LD_LIBRARY_PATH= dnf install -y ImageMagick
    RUN LD_LIBRARY_PATH= dnf install -y ghostscript
    # RUN LD_LIBRARY_PATH= dnf install -y libcurl

zlib:
    ###############################################################################
    # ZLIB Build
    # We compile a newer version because Lambda uses an old version (1.2.7) that
    # has a security vulnerability (CVE-2022-37434).
    # See https://github.com/brefphp/aws-lambda-layers/pull/110
    # Can be removed once Lambda updates their version.
    # https://github.com/madler/zlib/releases

    FROM +dependencies

    ARG VERSION_ZLIB=1.3
    ARG ZLIB_BUILD_DIR=${BUILD_DIR}/zlib

    WORKDIR ${ZLIB_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://github.com/madler/zlib/releases/download/v${VERSION_ZLIB}/zlib-${VERSION_ZLIB}.tar.gz \
        | tar xzC . --strip-components=1

    RUN set -xe \
        && make distclean \
        && CFLAGS="" \
        CPPFLAGS="-I${INSTALL_DIR}/include  -I/usr/include" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib" \
        ./configure \
        --prefix=${INSTALL_DIR}

    RUN set -xe \
        && make install \
        && rm ${INSTALL_DIR}/lib/libz.a

# --------------------------------------------------------------- #
# Builds and installs openssl
#
# Releases: https://github.com/openssl/openssl/releases
#
# Needs:
#   - zlib
#
# Needed by:
#   - curl
#   - php
# --------------------------------------------------------------- #
openssl:
    FROM +zlib

    ARG VERSION_OPENSSL=3.1.4
    ARG OPENSSL_BUILD_DIR=${BUILD_DIR}/openssl
    ARG CA_BUNDLE_SOURCE="https://curl.se/ca/cacert.pem"
    ARG CA_BUNDLE="${INSTALL_DIR}/bref/ssl/cert.pem"

    WORKDIR  ${OPENSSL_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://github.com/openssl/openssl/releases/download/openssl-${VERSION_OPENSSL}/openssl-${VERSION_OPENSSL}.tar.gz \
        | tar xzC . --strip-components=1

    RUN CFLAGS="" \
        CPPFLAGS="-I${INSTALL_DIR}/include -I/usr/include" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib" \
        ./config \
        --prefix=${INSTALL_DIR} \
        --openssldir=${INSTALL_DIR}/bref/ssl \
        --release \
        enable-tls1_3 \
        no-tests \
        shared \
        zlib

    # Explicitly compile make without parallelism because it fails if we use -jX (no error message)
    # I'm not 100% sure why, and I already lost 4 hours on this, but I found this:
    # https://github.com/openssl/openssl/issues/9931
    # https://stackoverflow.com/questions/28639207/why-cant-i-compile-openssl-with-multiple-threads-make-j3
    # Run `make install_sw install_ssldirs` instead of `make install` to skip installing man pages https://github.com/openssl/openssl/issues/8170
    RUN make -j1 install_sw install_ssldirs
    RUN mkdir -p ${INSTALL_DIR}/bref/ssl && curl -Lk -o ${CA_BUNDLE} ${CA_BUNDLE_SOURCE}

# --------------------------------------------------------------- #
# Builds and installs libxml2
#
# Releases: https://github.com/GNOME/libxml2/releases
#
# Needs:
#   - zlib
#
# Needed by:
#   - php
#   - libnghttp2
# --------------------------------------------------------------- #
libxml2:
    FROM +openssl

    ARG VERSION_XML2=2.11.5
    ARG XML2_BUILD_DIR=${BUILD_DIR}/xml2

    WORKDIR  ${XML2_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://download.gnome.org/sources/libxml2/${VERSION_XML2%.*}/libxml2-${VERSION_XML2}.tar.xz \
        | tar xJC . --strip-components=1

    RUN CFLAGS="" \
        CPPFLAGS="-I${INSTALL_DIR}/include -I/usr/include" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib" \
        ./configure \
        --prefix=${INSTALL_DIR} \
        --with-sysroot=${INSTALL_DIR} \
        --enable-shared \
        --disable-static \
        --with-html \
        --with-history \
        --enable-ipv6=no \
        --with-icu \
        --with-zlib \
        --without-python

    RUN make install
    RUN cp xml2-config ${INSTALL_DIR}/bin/xml2-config

libssh2:
    ##############################################################################
    # LIBSSH2
    # https://github.com/libssh2/libssh2/releases
    # Needs:
    #   - zlib
    #   - OpenSSL
    # Needed by:
    #   - curl

    FROM +libxml2

    ARG VERSION_LIBSSH2=1.11.0
    ARG LIBSSH2_BUILD_DIR=${BUILD_DIR}/libssh2

    WORKDIR  ${LIBSSH2_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://github.com/libssh2/libssh2/releases/download/libssh2-${VERSION_LIBSSH2}/libssh2-${VERSION_LIBSSH2}.tar.gz \
        | tar xzC . --strip-components=1


    RUN CFLAGS="" \
        CPPFLAGS="-I${INSTALL_DIR}/include -I/usr/include" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib" \
        cmake \
        # Build as a shared library (.so) instead of a static one
        -DBUILD_SHARED_LIBS=ON \
        # Build with OpenSSL support
        -DCRYPTO_BACKEND=OpenSSL \
        # Build with zlib support
        -DENABLE_ZLIB_COMPRESSION=ON \
        -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
        -DCMAKE_BUILD_TYPE=RELEASE

    RUN cmake  --build . --target install

libnghttp2:
    ###############################################################################
    # LIBNGHTTP2
    # This adds support for HTTP 2 requests in curl.
    # See https://github.com/brefphp/bref/issues/727 and https://github.com/brefphp/bref/pull/740
    # https://github.com/nghttp2/nghttp2/releases
    # Needs:
    #   - zlib
    #   - OpenSSL
    #   - libxml2
    # Needed by:
    #   - curl

    FROM +libssh2

    ARG VERSION_NGHTTP2=1.58.0
    ARG NGHTTP2_BUILD_DIR=${BUILD_DIR}/nghttp2

    WORKDIR  ${NGHTTP2_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://github.com/nghttp2/nghttp2/releases/download/v${VERSION_NGHTTP2}/nghttp2-${VERSION_NGHTTP2}.tar.gz \
        | tar xzC . --strip-components=1

    RUN CFLAGS="" \
        CPPFLAGS="-I${INSTALL_DIR}/include -I/usr/include" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib" \
        ./configure \
        --enable-lib-only \
        --prefix=${INSTALL_DIR}

    RUN make install

curl:
    ###############################################################################
    # CURL
    # # https://github.com/curl/curl/releases
    # # Needs:
    # #   - zlib
    # #   - OpenSSL
    # #   - libssh2
    # #   - libnghttp2
    # # Needed by:
    # #   - php

    FROM +libnghttp2

    ARG VERSION_CURL=8.4.0
    ARG CURL_BUILD_DIR=${BUILD_DIR}/curl

    WORKDIR  ${CURL_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://github.com/curl/curl/archive/curl-${VERSION_CURL//./_}.tar.gz \
        | tar xzC . --strip-components=1


    RUN autoreconf -if
    RUN CFLAGS="" \
        CPPFLAGS="-I${INSTALL_DIR}/include -I/usr/include" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib" \
        ./configure \
        --prefix=${INSTALL_DIR} \
        --with-ca-bundle=${CA_BUNDLE} \
        --enable-shared \
        --disable-static \
        --enable-optimize \
        --disable-warnings \
        --disable-dependency-tracking \
        --with-zlib \
        --enable-http \
        --enable-ftp  \
        --enable-file \
        --enable-proxy  \
        --enable-tftp \
        --enable-ipv6 \
        --enable-openssl-auto-load-config \
        --enable-cookies \
        --with-gnu-ld \
        --with-ssl \
        --with-libssh2 \
        --with-nghttp2

    RUN make install

libzip:
    ###############################################################################
    # LIBZIP
    # https://github.com/nih-at/libzip/releases
    # Needed by:
    #   - php

    FROM +libnghttp2

    ARG VERSION_ZIP=1.10.1
    ARG ZIP_BUILD_DIR=${BUILD_DIR}/zip

    WORKDIR  ${ZIP_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://github.com/nih-at/libzip/releases/download/v${VERSION_ZIP}/libzip-${VERSION_ZIP}.tar.gz \
        | tar xzC . --strip-components=1


    RUN CFLAGS="" \
        CPPFLAGS="-I${INSTALL_DIR}/include -I/usr/include" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib" \
        cmake \
        -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
        -DCMAKE_BUILD_TYPE=RELEASE

    RUN cmake  --build . --target install

libsodium:
    ###############################################################################
    # LIBSODIUM
    # https://github.com/jedisct1/libsodium/releases
    # Needed by:
    #   - php

    FROM +libzip

    ARG VERSION_LIBSODIUM=1.0.19
    ARG LIBSODIUM_BUILD_DIR=${BUILD_DIR}/libsodium

    WORKDIR  ${LIBSODIUM_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://github.com/jedisct1/libsodium/archive/${VERSION_LIBSODIUM}.tar.gz \
        | tar xzC . --strip-components=1

    RUN CFLAGS="" \
        CPPFLAGS="-I${INSTALL_DIR}/include -I/usr/include" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib" \
        ./autogen.sh \
        && ./configure \
        --prefix=${INSTALL_DIR}

    RUN make install

postgres:
    ###############################################################################
    # Postgres
    # https://github.com/postgres/postgres/releases
    # Needs:
    #   - OpenSSL
    # Needed by:
    #   - php

    FROM +libsodium

    ARG VERSION_POSTGRES=15.5
    ARG POSTGRES_BUILD_DIR=${BUILD_DIR}/postgres

    WORKDIR  ${POSTGRES_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://github.com/postgres/postgres/archive/REL_${VERSION_POSTGRES//./_}.tar.gz \
        | tar xzC . --strip-components=1


    RUN CFLAGS="" \
        CPPFLAGS="-I${INSTALL_DIR}/include -I/usr/include" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib" \
        ./configure \
        --prefix=${INSTALL_DIR} \
        --with-openssl \
        --without-readline
    RUN cd ${POSTGRES_BUILD_DIR}/src/interfaces/libpq && make && make install
    RUN cd ${POSTGRES_BUILD_DIR}/src/bin/pg_config && make && make install
    RUN cd ${POSTGRES_BUILD_DIR}/src/backend && make generated-headers
    RUN cd ${POSTGRES_BUILD_DIR}/src/include && make install

oniguruma:
    ###############################################################################
    # Oniguruma
    # This library is not packaged in PHP since PHP 7.4.
    # See https://github.com/php/php-src/blob/43dc7da8e3719d3e89bd8ec15ebb13f997bbbaa9/UPGRADING#L578-L581
    # We do not install the system version because I didn't manage to make it work...
    # Ideally we shouldn't compile it ourselves.
    # https://github.com/kkos/oniguruma/releases
    # Needed by:
    #   - php mbstring

    FROM +libsodium

    ARG VERSION_ONIG=6.9.9
    ARG ONIG_BUILD_DIR=${BUILD_DIR}/oniguruma

    WORKDIR  ${ONIG_BUILD_DIR}

    RUN set -xe \
        && curl -Ls https://github.com/kkos/oniguruma/releases/download/v${VERSION_ONIG}/onig-${VERSION_ONIG}.tar.gz \
        | tar xzC . --strip-components=1


    RUN ./configure \
        --prefix=${INSTALL_DIR}
    RUN make && make install

php:
    # PHP Build
    # https://github.com/php/php-src/releases
    # Needs:
    #   - zlib
    #   - libxml2
    #   - openssl
    #   - readline
    #   - sodium

    FROM +oniguruma

    # Note: this variable is used when building extra/custom extensions, do not remove
    ARG VERSION_PHP=8.2.12
    ENV PHP_BUILD_DIR=/tmp/php

    WORKDIR ${PHP_BUILD_DIR}

    # Download and unpack the source code
    # --location will follow redirects
    # --silent will hide the progress, but also the errors: we restore error messages with --show-error
    # --fail makes sure that curl returns an error instead of fetching the 404 page
    RUN curl --location --silent --show-error --fail https://www.php.net/get/php-${VERSION_PHP}.tar.gz/from/this/mirror \
        | tar xzC . --strip-components=1

    # Configure the build
    # -fstack-protector-strong : Be paranoid about stack overflows
    # -fpic : Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
    # -fpie : Support Address Space Layout Randomization (see -fpic)
    # -O3 : Optimize for fastest binaries possible.
    # -I : Add the path to the list of directories to be searched for header files during preprocessing.
    # --enable-option-checking=fatal: make sure invalid --configure-flags are fatal errors instead of just warnings
    # --enable-ftp: because ftp_ssl_connect() needs ftp to be compiled statically (see https://github.com/docker-library/php/issues/236)
    # --enable-mbstring: because otherwise there's no way to get pecl to use it properly (see https://github.com/docker-library/php/issues/195)
    # --with-zlib and --with-zlib-dir: See https://stackoverflow.com/a/42978649/245552
    RUN autoreconf -if
    RUN CFLAGS="-fstack-protector-strong -fpic -fpie -O3 -I${INSTALL_DIR}/include -I/usr/include -ffunction-sections -fdata-sections" \
        CPPFLAGS="-fstack-protector-strong -fpic -fpie -O3 -I${INSTALL_DIR}/include -I/usr/include -ffunction-sections -fdata-sections" \
        LDFLAGS="-L${INSTALL_DIR}/lib64 -L${INSTALL_DIR}/lib -Wl,-O1 -Wl,--strip-all -Wl,--hash-style=both -pie" \
        ./configure \
        --prefix=${INSTALL_DIR} \
        --enable-option-checking=fatal \
        --with-config-file-path=/opt/bref/etc/php \
        --with-config-file-scan-dir=/opt/bref/etc/php/conf.d:/var/task/php/conf.d \
        # WP Highly Recommended
        --enable-dom \
        --enable-exif \
        --enable-intl \
        --enable-mbstring \
        --enable-xml \
        --enable-fileinfo \
        --with-openssl \
        --with-mysqli=mysqlnd \
        --with-curl \
        --with-zip \
        # WP Recommended
        --enable-bcmath \
        --enable-filter \
        --enable-shmop \
        --with-iconv \
        --with-sodium \
        # WP Recommended for cache
        --enable-opcache \
        # Popular settings
        --enable-fpm \
        --with-pear \
        --with-xsl \
        # Not required by WP or AWS Lambda
        --disable-phpdbg \
        --disable-pcntl \
        --disable-pdo \
        --disable-cgi \
        --disable-sockets \
        --disable-ftp \
        --disable-soap \
        --without-sqlite3 \
        --without-zlib \
        # \/ This may need to be undone
        --disable-cli \
        # \/ This may need to be undone 
        --without-gettext \
        # \/ This may need to be undone 
        --without-readline
    RUN make -j $(nproc)

    # Run `make install` and override PEAR's PHAR URL because pear.php.net is down
    RUN set -xe \
        && make install PEAR_INSTALLER_URL='https://github.com/pear/pearweb_phars/raw/master/install-pear-nozlib.phar' \
        && { find ${INSTALL_DIR}/bin ${INSTALL_DIR}/sbin -type f -perm +0111 -exec strip --strip-all '{}' + || true; } \
        && make clean \
        && cp php.ini-production ${INSTALL_DIR}/etc/php/php.ini

php-extensions:
    FROM +php

    RUN pecl install APCu
    RUN pecl install imagick
    RUN pecl install igbinary

devfiles:
    # Install some dev files for using old libraries already on the system.
    # readline-devel : needed for the readline extension
    RUN LD_LIBRARY_PATH= dnf install -y readline-devel
    # gettext-devel : needed for the --with-gettext flag
    RUN LD_LIBRARY_PATH= dnf install -y gettext-devel
    # libicu-devel : needed for intl
    RUN LD_LIBRARY_PATH= dnf install -y libicu-devel
    # libxslt-devel : needed for the XSL extension
    RUN LD_LIBRARY_PATH= dnf install -y libxslt-devel
    # sqlite-devel : Since PHP 7.4 this must be installed (https://github.com/php/php-src/blob/99b8e67615159fc600a615e1e97f2d1cf18f14cb/UPGRADING#L616-L619)
    RUN LD_LIBRARY_PATH= dnf install -y sqlite-devel
